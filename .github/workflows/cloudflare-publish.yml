name: Build, Version, and Deploy to Cloudflare Workers

on:
  push:
    branches:
      - main        # Deploy to production
      - preview     # Deploy to preview
  pull_request:
    branches:
      - main        # Create preview for PRs to main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  version:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, '[skip ci]')
    name: Semantic Versioning
    
    outputs:
      version: ${{ steps.semantic.outputs.new_release_version }}
      released: ${{ steps.semantic.outputs.new_release_published }}
      release-notes: ${{ steps.semantic.outputs.new_release_notes }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test || echo "No tests configured"
        continue-on-error: true

      - name: Build project
        run: |
          npm run build
          npm run build:worker

      - name: Semantic Release
        id: semantic
        uses: cycjimmy/semantic-release-action@v4
        with:
          semantic_version: 22
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-production:
    needs: [version]
    if: always() && github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    name: Deploy to Production
    environment: production

    steps:
      - name: Checkout (pull latest after semantic-release)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # Pull the commit created by semantic-release
          ref: main

      - name: Pull latest changes from semantic-release
        run: git pull origin main

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test || echo "No tests configured"
        continue-on-error: true

      - name: Build Worker with updated version
        run: |
          echo "Building worker with updated package.json version..."
          npm run build:worker
          echo "Built worker version info:"
          echo "Version: $(grep '"version"' package.json | cut -d'"' -f4)" || echo "Version not found in package.json"

      - name: Deploy to Production
        id: deploy
        run: |
          # Deploy to production first
          VERSION="${{ needs.version.outputs.version || 'dev' }}"
          echo "🚀 Deploying v$VERSION to production..."
          
          # Deploy with better error handling
          if DEPLOY_OUTPUT=$(npx wrangler deploy 2>&1); then
            echo "✅ Deployment successful:"
            echo "$DEPLOY_OUTPUT"
          else
            echo "❌ Deployment failed with exit code $?"
            echo "Error output:"
            echo "$DEPLOY_OUTPUT"
            echo "\n🔍 Debugging info:"
            echo "Working directory: $(pwd)"
            echo "Files in dist/:"
            ls -la dist/ || echo "No dist directory"
            echo "\nWrangler version:"
            npx wrangler --version
            echo "\nWorker size:"
            du -h dist/worker.js 2>/dev/null || echo "No worker.js found"
            exit 1
          fi
          
          # Extract worker URL
          WORKER_URL=$(echo "$DEPLOY_OUTPUT" | grep -o 'https://[a-zA-Z0-9.-]*\.workers\.dev' | head -1)
          echo "worker-url=$WORKER_URL" >> $GITHUB_OUTPUT
          echo "✅ Deployed to production: $WORKER_URL"
          
          # Upload secrets after deployment
          echo "🔑 Uploading secrets to production..."
          echo "ALLOWED_API_KEYS = $ALLOWED_API_KEYS" | npx wrangler secret bulk
          echo "✅ Secrets uploaded successfully"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          ALLOWED_API_KEYS: ${{ secrets.ALLOWED_API_KEYS }}

      - name: Verify production deployment
        run: |
          WORKER_URL="${{ steps.deploy.outputs.worker-url }}"
          
          if [ -z "$WORKER_URL" ]; then
            echo "❌ Failed to capture worker URL"
            exit 1
          fi
          
          # Extract first API key for testing
          FIRST_API_KEY=$(echo "$ALLOWED_API_KEYS" | cut -d',' -f1)
          
          echo "🧪 Verifying production deployment at: $WORKER_URL"
          echo "🔑 Using API key for testing: ${FIRST_API_KEY:0:10}..."
          
          # Wait for deployment to propagate
          sleep 30
          
          # Test health endpoint and verify version (accept degraded status)
          echo "Testing health endpoint..."
          HEALTH_RESPONSE=$(curl -s "$WORKER_URL/health" 2>/dev/null) || (echo "❌ Health check failed" && exit 1)
          HEALTH_STATUS=$(echo "$HEALTH_RESPONSE" | jq -r '.status // "error"')
          if [[ "$HEALTH_STATUS" == "ok" || "$HEALTH_STATUS" == "degraded" ]]; then
            echo "✅ Health check passed with status: $HEALTH_STATUS"
            echo "   Response: $HEALTH_RESPONSE"
          else
            echo "❌ Health check failed with status: $HEALTH_STATUS"
            exit 1
          fi
          
          # Extract and verify version
          DEPLOYED_VERSION=$(echo "$HEALTH_RESPONSE" | grep -o '"version":"[^"]*"' | cut -d'"' -f4)
          EXPECTED_VERSION="${{ needs.version.outputs.version || 'dev' }}"
          
          if [ "$DEPLOYED_VERSION" = "$EXPECTED_VERSION" ]; then
            echo "✅ Version verified: $DEPLOYED_VERSION"
          else
            echo "⚠️  Version mismatch - deployed: $DEPLOYED_VERSION, expected: $EXPECTED_VERSION"
            echo "ℹ️  This may indicate the version string in code wasn't updated"
          fi
          
          # Test root endpoint and verify environment
          echo "Testing root endpoint..."
          ROOT_RESPONSE=$(curl -s "$WORKER_URL/")
          ENVIRONMENT=$(echo "$ROOT_RESPONSE" | jq -r '.environment // "unknown"')
          
          if [ "$ENVIRONMENT" = "production" ]; then
            echo "✅ Environment confirmed: $ENVIRONMENT"
          else
            echo "⚠️  Environment mismatch - expected: production, got: $ENVIRONMENT"
          fi
          
          # Full test suite for production
          echo "Testing tools endpoint..."
          TOOLS_COUNT=$(curl -f "$WORKER_URL/tools" -H "Authorization: Bearer $FIRST_API_KEY" 2>/dev/null | jq '.tools | length') || (echo "❌ Tools endpoint failed" && exit 1)
          if [ "$TOOLS_COUNT" -gt 0 ]; then
            echo "✅ Tools endpoint passed - $TOOLS_COUNT tools available"
          else
            echo "❌ Tools endpoint failed - no tools found"
            exit 1
          fi
          
          # Test MCP endpoint
          echo "Testing MCP endpoint..."
          AUTH_SUCCESS=$(curl -s -X POST "$WORKER_URL/mcp" \
            -H "Authorization: Bearer $FIRST_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{"jsonrpc": "2.0", "id": 2, "method": "tools/list", "params": {}}')
          
          if echo "$AUTH_SUCCESS" | grep -q -E "(result|tools|jsonrpc)"; then
            echo "✅ MCP endpoint working"
          else
            echo "❌ MCP endpoint failed"
            exit 1
          fi
          
          VERSION="${{ needs.version.outputs.version || 'dev' }}"
          RELEASED="${{ needs.version.outputs.released }}"
          
          echo "🎉 All deployment verification tests passed!"
          
          if [ "$RELEASED" = "true" ]; then
            echo "📦 New version v$VERSION released and deployed!"
            echo "📝 Release notes: ${{ needs.version.outputs.release-notes }}"
          else
            echo "🔄 Version v$VERSION deployed to production"
          fi
          
          echo "🚀 Production server ready at: $WORKER_URL"
        env:
          ALLOWED_API_KEYS: ${{ secrets.ALLOWED_API_KEYS }}

      - name: Collect Worker Logs
        run: |
          echo "📋 Starting worker log collection..."
          
          # Create empty log file first
          touch worker_logs.json
          
          # Start wrangler tail in background to capture logs
          timeout 45s wrangler tail --format json >> worker_logs.json &
          TAIL_PID=$!
          
          echo "📡 Started log collection (PID: $TAIL_PID)"
          
          # Give logs a moment to start
          sleep 3
          
          # Make test requests to generate logs
          echo "🧪 Making test requests to generate logs..."
          
          # Test health endpoint
          echo "Testing health endpoint for logging..."
          curl -s "$WORKER_URL/health" > /dev/null
          
          # Test tools endpoint with auth
          echo "Testing authenticated tools endpoint..."
          curl -s "$WORKER_URL/tools" -H "Authorization: Bearer $FIRST_API_KEY" > /dev/null
          
          # Test MCP endpoint with a simple request
          echo "Testing MCP endpoint for logging..."
          curl -s -X POST "$WORKER_URL/mcp" \
            -H "Authorization: Bearer $FIRST_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{"jsonrpc": "2.0", "id": "log-test", "method": "tools/list", "params": {}}' > /dev/null
          
          # Test an invalid endpoint to generate error logs
          echo "Testing error handling logging..."
          curl -s "$WORKER_URL/invalid-endpoint" > /dev/null
          
          # Test unauthorized request
          echo "Testing unauthorized request logging..."
          curl -s "$WORKER_URL/tools" > /dev/null
          
          # Wait for logs to be captured
          echo "⏱️  Waiting for logs to be captured..."
          sleep 12
          
          # Stop log collection gracefully
          kill $TAIL_PID 2>/dev/null || true
          sleep 2
          wait $TAIL_PID 2>/dev/null || true
          
          echo "🔍 Analyzing collected logs..."
          
          # Check if we got any logs
          if [ -f worker_logs.json ] && [ -s worker_logs.json ]; then
            echo "✅ Logs collected successfully!"
            
            # Parse and display key log metrics
            echo "📊 Log Analysis:"
            
            # Count total log entries
            LOG_COUNT=$(wc -l < worker_logs.json || echo "0")
            echo "  • Total log entries: $LOG_COUNT"
            
            # Count by log level
            if [ "$LOG_COUNT" -gt 0 ]; then
              ERROR_COUNT=$(grep -c '"level":"ERROR"' worker_logs.json || echo "0")
              WARN_COUNT=$(grep -c '"level":"WARN"' worker_logs.json || echo "0")
              INFO_COUNT=$(grep -c '"level":"INFO"' worker_logs.json || echo "0")
              DEBUG_COUNT=$(grep -c '"level":"DEBUG"' worker_logs.json || echo "0")
              
              echo "  • ERROR logs: $ERROR_COUNT"
              echo "  • WARN logs: $WARN_COUNT"  
              echo "  • INFO logs: $INFO_COUNT"
              echo "  • DEBUG logs: $DEBUG_COUNT"
              
              # Show unique endpoints accessed
              ENDPOINTS=$(grep -o '"endpoint":"[^"]*"' worker_logs.json | sort | uniq || echo "")
              if [ -n "$ENDPOINTS" ]; then
                echo "  • Endpoints accessed:"
                echo "$ENDPOINTS" | sed 's/"endpoint":"/    - /' | sed 's/"$//'
              fi
              
              # Check for performance metrics
              PERF_LOGS=$(grep -c 'performanceMetric.*true' worker_logs.json || echo "0")
              echo "  • Performance metrics logged: $PERF_LOGS"
              
              # Check for cache operations
              CACHE_HITS=$(grep -c 'cacheOperation.*hit' worker_logs.json || echo "0")
              CACHE_MISSES=$(grep -c 'cacheOperation.*miss' worker_logs.json || echo "0")
              CACHE_SETS=$(grep -c 'cacheOperation.*set' worker_logs.json || echo "0")
              echo "  • Cache hits: $CACHE_HITS"
              echo "  • Cache misses: $CACHE_MISSES"
              echo "  • Cache sets: $CACHE_SETS"
              
              # Show sample logs (first few entries)
              echo "\n📝 Sample log entries:"
              head -5 worker_logs.json | jq -r '. | "[" + .timestamp + "] " + .level + ": " + .message' 2>/dev/null || head -5 worker_logs.json
              
              # Check for any errors in our test requests
              if [ "$ERROR_COUNT" -gt 0 ]; then
                echo "\n⚠️  Error logs detected:"
                grep '"level":"ERROR"' worker_logs.json | head -3 | jq -r '.message' 2>/dev/null || grep '"level":"ERROR"' worker_logs.json | head -3
              fi
            fi
            
          else
            echo "⚠️  No logs collected - this might indicate:"
            echo "  • Logs are not being generated"
            echo "  • Log collection timed out"
            echo "  • Worker is not receiving requests"
            echo "  • Wrangler tail command failed"
          fi
          
          # Upload logs as artifact for later inspection
          echo "📤 Uploading logs as build artifact..."
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          ALLOWED_API_KEYS: ${{ secrets.ALLOWED_API_KEYS }}

      - name: Upload Worker Logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: worker-logs-production-${{ github.run_number }}
          path: |
            worker_logs.json
            *.log
          retention-days: 7

  deploy-preview:
    if: github.ref == 'refs/heads/preview' || github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    name: Create Preview Version
    environment: preview

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test || echo "No tests configured"
        continue-on-error: true

      - name: Build Worker
        run: npm run build:worker

      - name: Create Preview Version
        id: deploy-preview
        run: |
          # Create version tag for organization in Cloudflare dashboard
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            VERSION_TAG="pr${{ github.event.number }}"
            echo "🚀 Creating preview version for PR #${{ github.event.number }}"
          else
            VERSION_TAG="preview"
            echo "🚀 Creating preview version for preview branch"
          fi
          
          # Note: Preview versions inherit secrets from the deployed worker
          # Secrets are uploaded only during production deployment
          
          # Upload new version with persistent preview alias
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # For PRs, create both version-specific and pr alias
            DEPLOY_OUTPUT=$(npx wrangler versions upload --tag "$VERSION_TAG" --preview-alias "pr${{ github.event.number }}" --message "Preview: PR #${{ github.event.number }}" 2>&1)
          else
            # For preview branch, always update the "preview" alias
            DEPLOY_OUTPUT=$(npx wrangler versions upload --tag "$VERSION_TAG" --preview-alias "preview" --message "Preview: Phase 0 Critical Operations" 2>&1)
          fi
          echo "$DEPLOY_OUTPUT"
          
          # Extract version ID and preview URLs from wrangler output
          VERSION_ID=$(echo "$DEPLOY_OUTPUT" | grep -o 'Version ID: [a-f0-9-]*' | cut -d' ' -f3)
          VERSION_PREVIEW_URL=$(echo "$DEPLOY_OUTPUT" | grep -o 'Version Preview URL: https://[^[:space:]]*' | cut -d' ' -f4)
          ALIAS_PREVIEW_URL=$(echo "$DEPLOY_OUTPUT" | grep -o 'Alias Preview URL: https://[^[:space:]]*' | cut -d' ' -f4)
          
          # Use alias URL as primary preview URL, fall back to version URL
          if [ -n "$ALIAS_PREVIEW_URL" ]; then
            PREVIEW_URL="$ALIAS_PREVIEW_URL"
          else
            PREVIEW_URL="$VERSION_PREVIEW_URL"
          fi
          
          echo "version-id=$VERSION_ID" >> $GITHUB_OUTPUT
          echo "preview-url=$PREVIEW_URL" >> $GITHUB_OUTPUT
          echo "version-preview-url=$VERSION_PREVIEW_URL" >> $GITHUB_OUTPUT
          echo "alias-preview-url=$ALIAS_PREVIEW_URL" >> $GITHUB_OUTPUT
          echo "version-tag=$VERSION_TAG" >> $GITHUB_OUTPUT
          
          echo "✅ Preview version created: $VERSION_TAG"
          echo "📝 Version ID: $VERSION_ID"
          if [ -n "$ALIAS_PREVIEW_URL" ]; then
            echo "🔗 Persistent Alias URL: $ALIAS_PREVIEW_URL"
            echo "🔗 Version-specific URL: $VERSION_PREVIEW_URL"
          else
            echo "🔗 Preview URL: $PREVIEW_URL"
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Verify preview version
        run: |
          PREVIEW_URL="${{ steps.deploy-preview.outputs.preview-url }}"
          ALIAS_URL="${{ steps.deploy-preview.outputs.alias-preview-url }}"
          VERSION_URL="${{ steps.deploy-preview.outputs.version-preview-url }}"
          VERSION_ID="${{ steps.deploy-preview.outputs.version-id }}"
          VERSION_TAG="${{ steps.deploy-preview.outputs.version-tag }}"
          
          if [ -z "$PREVIEW_URL" ]; then
            echo "❌ Failed to capture preview URL"
            exit 1
          fi
          
          # Use production API keys since it's the same worker, just a different version
          FIRST_API_KEY=$(echo "$ALLOWED_API_KEYS" | cut -d',' -f1)
          
          echo "🧪 Verifying preview version: $VERSION_TAG"
          echo "📝 Version ID: $VERSION_ID"
          if [ -n "$ALIAS_URL" ]; then
            echo "🔗 Persistent Alias: $ALIAS_URL"
            echo "🔗 Version-specific: $VERSION_URL"
          else
            echo "🔗 Preview URL: $PREVIEW_URL"
          fi
          
          # Wait for version to propagate
          sleep 25
          
          # Test health endpoint (accept degraded status)
          echo "Testing health endpoint..."
          HEALTH_RESPONSE=$(curl -s "$PREVIEW_URL/health" 2>/dev/null) || (echo "❌ Health check failed" && exit 1)
          HEALTH_STATUS=$(echo "$HEALTH_RESPONSE" | jq -r '.status // "error"')
          if [[ "$HEALTH_STATUS" == "ok" || "$HEALTH_STATUS" == "degraded" ]]; then
            echo "✅ Health check passed with status: $HEALTH_STATUS"
          else
            echo "❌ Health check failed with status: $HEALTH_STATUS"
            exit 1
          fi
          
          # Test basic functionality
          echo "Testing basic authentication..."
          AUTH_TEST=$(curl -s "$PREVIEW_URL/tools" -H "Authorization: Bearer $FIRST_API_KEY")
          if echo "$AUTH_TEST" | grep -q "tools"; then
            echo "✅ Preview version working"
          else
            echo "❌ Preview version failed"
            exit 1
          fi
          
          echo "🎉 Preview version verification passed!"
          if [ -n "$ALIAS_URL" ]; then
            echo "🔗 Stable Preview URL: $ALIAS_URL"
            echo "🔗 Version-specific URL: $VERSION_URL"
            echo "📦 Version: $VERSION_TAG ($VERSION_ID)"
            echo ""
            echo "ℹ️  The 'preview' alias always points to the latest preview branch."
            echo "ℹ️  Production remains unchanged until merged to main."
          else
            echo "🔗 Preview URL: $PREVIEW_URL"
            echo "📦 Version: $VERSION_TAG ($VERSION_ID)"
          fi
        env:
          ALLOWED_API_KEYS: ${{ secrets.ALLOWED_API_KEYS }}

      - name: Collect Preview Worker Logs
        run: |
          echo "📋 Starting preview worker log collection..."
          
          PREVIEW_URL="${{ steps.deploy-preview.outputs.preview-url }}"
          VERSION_TAG="${{ steps.deploy-preview.outputs.version-tag }}"
          
          # Create empty log file first
          touch preview_logs.json
          
          # Start wrangler tail in background to capture logs
          timeout 35s wrangler tail --format json >> preview_logs.json &
          TAIL_PID=$!
          
          echo "📡 Started preview log collection (PID: $TAIL_PID)"
          
          # Give logs a moment to start
          sleep 3
          
          # Make test requests to generate logs
          echo "🧪 Making test requests to preview worker..."
          
          # Test health endpoint
          echo "Testing preview health endpoint..."
          curl -s "$PREVIEW_URL/health" > /dev/null
          
          # Test tools endpoint with auth
          echo "Testing preview authenticated endpoint..."
          curl -s "$PREVIEW_URL/tools" -H "Authorization: Bearer $FIRST_API_KEY" > /dev/null
          
          # Test error handling
          echo "Testing preview error handling..."
          curl -s "$PREVIEW_URL/invalid" > /dev/null
          
          # Wait for logs to be captured
          echo "⏱️  Waiting for preview logs to be captured..."
          sleep 10
          
          # Stop log collection gracefully
          kill $TAIL_PID 2>/dev/null || true
          sleep 2
          wait $TAIL_PID 2>/dev/null || true
          
          echo "🔍 Analyzing preview logs..."
          
          if [ -f preview_logs.json ] && [ -s preview_logs.json ]; then
            echo "✅ Preview logs collected successfully!"
            
            LOG_COUNT=$(wc -l < preview_logs.json || echo "0")
            echo "  • Total preview log entries: $LOG_COUNT"
            
            if [ "$LOG_COUNT" -gt 0 ]; then
              # Check environment is set correctly for preview
              PREVIEW_ENV_LOGS=$(grep -c '"environment":"preview"' preview_logs.json || echo "0")
              echo "  • Preview environment logs: $PREVIEW_ENV_LOGS"
              
              # Check for performance features
              CACHE_LOGS=$(grep -c 'cacheOperation' preview_logs.json || echo "0")
              DEDUP_LOGS=$(grep -c 'Deduplicating' preview_logs.json || echo "0")
              RETRY_LOGS=$(grep -c 'Retry attempt' preview_logs.json || echo "0")
              
              echo "  • Cache operations: $CACHE_LOGS"
              echo "  • Deduplication: $DEDUP_LOGS"
              echo "  • Retry attempts: $RETRY_LOGS"
              
              # Show preview-specific logs
              echo "\n📝 Preview log sample:"
              head -3 preview_logs.json | jq -r '. | "[" + .timestamp + "] " + .level + ": " + .message' 2>/dev/null || head -3 preview_logs.json
            fi
          else
            echo "⚠️  No preview logs collected"
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          ALLOWED_API_KEYS: ${{ secrets.ALLOWED_API_KEYS }}

      - name: Upload Preview Worker Logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: worker-logs-preview-${{ github.run_number }}
          path: |
            preview_logs.json
            *.log
          retention-days: 7