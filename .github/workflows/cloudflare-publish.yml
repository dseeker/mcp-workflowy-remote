name: Build, Version, and Deploy to Cloudflare Workers

on:
  push:
    branches:
      - main        # Deploy to production
      - preview     # Deploy to preview
  pull_request:
    branches:
      - main        # Create preview for PRs to main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  version:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, '[skip ci]')
    name: Semantic Versioning
    
    outputs:
      version: ${{ steps.semantic.outputs.new_release_version }}
      released: ${{ steps.semantic.outputs.new_release_published }}
      release-notes: ${{ steps.semantic.outputs.new_release_notes }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test || echo "No tests configured"
        continue-on-error: true

      - name: Build project
        run: |
          npm run build
          npm run build:worker

      - name: Semantic Release
        id: semantic
        uses: cycjimmy/semantic-release-action@v4
        with:
          semantic_version: 22
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-production:
    needs: [version]
    if: always() && github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    name: Deploy to Production
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test || echo "No tests configured"
        continue-on-error: true

      - name: Build Worker
        run: npm run build:worker

      - name: Upload secrets and deploy to Production
        id: deploy
        run: |
          # Upload secrets to production environment (default)
          echo "üîë Uploading secrets to production..."
          echo "ALLOWED_API_KEYS = $ALLOWED_API_KEYS" | npx wrangler secret bulk
          
          # Deploy to production
          VERSION="${{ needs.version.outputs.version || 'dev' }}"
          echo "üöÄ Deploying v$VERSION to production..."
          DEPLOY_OUTPUT=$(npx wrangler deploy 2>&1)
          echo "$DEPLOY_OUTPUT"
          
          # Extract worker URL
          WORKER_URL=$(echo "$DEPLOY_OUTPUT" | grep -o 'https://[a-zA-Z0-9.-]*\.workers\.dev' | head -1)
          echo "worker-url=$WORKER_URL" >> $GITHUB_OUTPUT
          echo "‚úÖ Deployed to production: $WORKER_URL"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          ALLOWED_API_KEYS: ${{ secrets.ALLOWED_API_KEYS }}

      - name: Verify production deployment
        run: |
          WORKER_URL="${{ steps.deploy.outputs.worker-url }}"
          
          if [ -z "$WORKER_URL" ]; then
            echo "‚ùå Failed to capture worker URL"
            exit 1
          fi
          
          # Extract first API key for testing
          FIRST_API_KEY=$(echo "$ALLOWED_API_KEYS" | cut -d',' -f1)
          
          echo "üß™ Verifying production deployment at: $WORKER_URL"
          echo "üîë Using API key for testing: ${FIRST_API_KEY:0:10}..."
          
          # Wait for deployment to propagate
          sleep 30
          
          # Test health endpoint
          echo "Testing health endpoint..."
          HEALTH_RESPONSE=$(curl -f "$WORKER_URL/health" 2>/dev/null) || (echo "‚ùå Health check failed" && exit 1)
          echo "‚úÖ Health check passed: $HEALTH_RESPONSE"
          
          # Test root endpoint and verify environment
          echo "Testing root endpoint..."
          ROOT_RESPONSE=$(curl -s "$WORKER_URL/")
          ENVIRONMENT=$(echo "$ROOT_RESPONSE" | jq -r '.environment // "unknown"')
          
          if [ "$ENVIRONMENT" = "production" ]; then
            echo "‚úÖ Environment confirmed: $ENVIRONMENT"
          else
            echo "‚ö†Ô∏è  Environment mismatch - expected: production, got: $ENVIRONMENT"
          fi
          
          # Full test suite for production
          echo "Testing tools endpoint..."
          TOOLS_COUNT=$(curl -f "$WORKER_URL/tools" -H "Authorization: Bearer $FIRST_API_KEY" 2>/dev/null | jq '.tools | length') || (echo "‚ùå Tools endpoint failed" && exit 1)
          if [ "$TOOLS_COUNT" -gt 0 ]; then
            echo "‚úÖ Tools endpoint passed - $TOOLS_COUNT tools available"
          else
            echo "‚ùå Tools endpoint failed - no tools found"
            exit 1
          fi
          
          # Test MCP endpoint
          echo "Testing MCP endpoint..."
          AUTH_SUCCESS=$(curl -s -X POST "$WORKER_URL/mcp" \
            -H "Authorization: Bearer $FIRST_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{"jsonrpc": "2.0", "id": 2, "method": "tools/list", "params": {}}')
          
          if echo "$AUTH_SUCCESS" | grep -q -E "(result|tools|jsonrpc)"; then
            echo "‚úÖ MCP endpoint working"
          else
            echo "‚ùå MCP endpoint failed"
            exit 1
          fi
          
          VERSION="${{ needs.version.outputs.version || 'dev' }}"
          RELEASED="${{ needs.version.outputs.released }}"
          
          echo "üéâ All deployment verification tests passed!"
          
          if [ "$RELEASED" = "true" ]; then
            echo "üì¶ New version v$VERSION released and deployed!"
            echo "üìù Release notes: ${{ needs.version.outputs.release-notes }}"
          else
            echo "üîÑ Version v$VERSION deployed to production"
          fi
          
          echo "üöÄ Production server ready at: $WORKER_URL"
        env:
          ALLOWED_API_KEYS: ${{ secrets.ALLOWED_API_KEYS }}

  deploy-preview:
    if: github.ref == 'refs/heads/preview' || github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    name: Deploy to Preview
    environment: preview

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test || echo "No tests configured"
        continue-on-error: true

      - name: Build Worker
        run: npm run build:worker

      - name: Upload secrets and deploy to Preview
        id: deploy-preview
        run: |
          # Upload secrets to preview environment
          echo "üîë Uploading secrets to preview..."
          echo "ALLOWED_API_KEYS = $ALLOWED_API_KEYS_PREVIEW" | npx wrangler secret bulk --env preview
          
          # Deploy to preview
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "üöÄ Deploying PR #${{ github.event.number }} to preview"
          else
            echo "üöÄ Deploying preview branch to preview environment"
          fi
          
          DEPLOY_OUTPUT=$(npx wrangler deploy --env preview 2>&1)
          echo "$DEPLOY_OUTPUT"
          
          # Extract worker URL
          WORKER_URL=$(echo "$DEPLOY_OUTPUT" | grep -o 'https://[a-zA-Z0-9.-]*\.workers\.dev' | head -1)
          echo "worker-url=$WORKER_URL" >> $GITHUB_OUTPUT
          echo "‚úÖ Deployed to preview: $WORKER_URL"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          ALLOWED_API_KEYS_PREVIEW: ${{ secrets.ALLOWED_API_KEYS_PREVIEW }}

      - name: Verify preview deployment
        run: |
          WORKER_URL="${{ steps.deploy-preview.outputs.worker-url }}"
          
          if [ -z "$WORKER_URL" ]; then
            echo "‚ùå Failed to capture worker URL"
            exit 1
          fi
          
          # Extract first API key for testing
          FIRST_API_KEY=$(echo "$ALLOWED_API_KEYS_PREVIEW" | cut -d',' -f1)
          
          echo "üß™ Verifying preview deployment at: $WORKER_URL"
          echo "üîë Using preview API key for testing"
          
          # Wait for deployment to propagate
          sleep 15
          
          # Test health endpoint
          echo "Testing health endpoint..."
          HEALTH_RESPONSE=$(curl -f "$WORKER_URL/health" 2>/dev/null) || (echo "‚ùå Health check failed" && exit 1)
          echo "‚úÖ Health check passed: $HEALTH_RESPONSE"
          
          # Test root endpoint and verify environment
          echo "Testing root endpoint..."
          ROOT_RESPONSE=$(curl -s "$WORKER_URL/")
          ENVIRONMENT=$(echo "$ROOT_RESPONSE" | jq -r '.environment // "unknown"')
          
          if [ "$ENVIRONMENT" = "preview" ]; then
            echo "‚úÖ Environment confirmed: $ENVIRONMENT"
          else
            echo "‚ö†Ô∏è  Environment mismatch - expected: preview, got: $ENVIRONMENT"
          fi
          
          # Basic test for preview
          echo "Testing basic authentication..."
          AUTH_TEST=$(curl -s "$WORKER_URL/tools" -H "Authorization: Bearer $FIRST_API_KEY")
          if echo "$AUTH_TEST" | grep -q "tools"; then
            echo "‚úÖ Preview authentication working"
          else
            echo "‚ùå Preview authentication failed"
            exit 1
          fi
          
          echo "üéâ Preview deployment verification passed!"
          echo "üîó Preview URL: $WORKER_URL"
        env:
          ALLOWED_API_KEYS_PREVIEW: ${{ secrets.ALLOWED_API_KEYS_PREVIEW }}