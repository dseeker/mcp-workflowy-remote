name: Deploy to Cloudflare Workers

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy Workflowy MCP Server

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Worker
        run: npm run build:worker

      - name: Upload secrets and deploy to Cloudflare Workers
        id: deploy
        run: |
          # First, upload the secrets
          echo "üîë Uploading secrets..."
          echo "ALLOWED_API_KEYS = $ALLOWED_API_KEYS" | npx wrangler secret bulk
          
          # Then deploy and capture output
          echo "üöÄ Deploying worker..."
          DEPLOY_OUTPUT=$(npx wrangler deploy 2>&1)
          echo "$DEPLOY_OUTPUT"
          
          # Extract the worker URL from the output
          WORKER_URL=$(echo "$DEPLOY_OUTPUT" | grep -o 'https://[a-zA-Z0-9.-]*\.workers\.dev' | head -1)
          
          # Set as output for next step
          echo "worker-url=$WORKER_URL" >> $GITHUB_OUTPUT
          echo "‚úÖ Captured worker URL: $WORKER_URL"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          ALLOWED_API_KEYS: ${{ secrets.ALLOWED_API_KEYS }}

      - name: Verify deployment
        run: |
          # Get the worker URL from the previous step
          WORKER_URL="${{ steps.deploy.outputs.worker-url }}"
          
          if [ -z "$WORKER_URL" ]; then
            echo "‚ùå Failed to capture worker URL from deployment step"
            exit 1
          fi
          
          # Extract first API key from comma-separated list for testing
          FIRST_API_KEY=$(echo "$ALLOWED_API_KEYS" | cut -d',' -f1)
          
          if [ -z "$FIRST_API_KEY" ]; then
            echo "‚ùå No API key available for testing"
            exit 1
          fi
          
          echo "üß™ Verifying deployment at: $WORKER_URL"
          echo "üîë Using first API key for testing: ${FIRST_API_KEY:0:10}..."
          
          # Wait a moment for deployment to propagate
          sleep 30
          
          # Test health endpoint (no auth required)
          echo "Testing health endpoint..."
          HEALTH_RESPONSE=$(curl -f "$WORKER_URL/health" 2>/dev/null) || (echo "‚ùå Health check failed" && exit 1)
          echo "‚úÖ Health check passed: $HEALTH_RESPONSE"
          
          # Test root endpoint (no auth required)
          echo "Testing root endpoint..."
          ROOT_NAME=$(curl -f "$WORKER_URL/" 2>/dev/null | jq -r .name) || (echo "‚ùå Root endpoint failed" && exit 1)
          echo "‚úÖ Root endpoint passed: $ROOT_NAME"
          
          # Test tools listing (no auth required)
          echo "Testing tools endpoint..."
          TOOLS_COUNT=$(curl -f "$WORKER_URL/tools" 2>/dev/null | jq '.tools | length') || (echo "‚ùå Tools endpoint failed" && exit 1)
          if [ "$TOOLS_COUNT" -gt 0 ]; then
            echo "‚úÖ Tools endpoint passed - $TOOLS_COUNT tools available"
          else
            echo "‚ùå Tools endpoint failed - no tools found"
            exit 1
          fi
          
          # Test authentication requirement (should fail without API key)
          echo "Testing authentication requirement without API key..."
          AUTH_RESPONSE=$(curl -s -X POST "$WORKER_URL/tools/list_nodes" -H "Content-Type: application/json" -d '{}')
          if echo "$AUTH_RESPONSE" | grep -q "Unauthorized"; then
            echo "‚úÖ Authentication requirement working - unauthorized requests properly blocked"
          else
            echo "‚ùå Authentication bypass detected - this should not happen!"
            echo "Response: $AUTH_RESPONSE"
            exit 1
          fi
          
          # Test authenticated request (should succeed with API key)
          echo "Testing authenticated request with valid API key..."
          AUTH_SUCCESS=$(curl -s -X POST "$WORKER_URL/tools/list_nodes" \
            -H "Authorization: Bearer $FIRST_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{"workflowy_username":"test","workflowy_password":"test"}')
          
          # Should get either success or Workflowy credential error (both mean auth worked)
          if echo "$AUTH_SUCCESS" | grep -q -E "(Error listing nodes|Successfully|content)"; then
            echo "‚úÖ API key authentication working - request processed"
            echo "Response preview: $(echo "$AUTH_SUCCESS" | head -c 100)..."
          else
            echo "‚ùå API key authentication failed"
            echo "Response: $AUTH_SUCCESS"
            exit 1
          fi
          
          echo "üéâ All deployment verification tests passed!"
          echo "üöÄ Your secure remote MCP server is ready at: $WORKER_URL"
          echo "üîë Use your API keys to authenticate MCP client requests"
        env:
          ALLOWED_API_KEYS: ${{ secrets.ALLOWED_API_KEYS }}